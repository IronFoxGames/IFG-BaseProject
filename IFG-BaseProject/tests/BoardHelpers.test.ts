import { BoardHelpers } from '../assets/scripts/core';
import { Direction } from '../assets/scripts/core/enums/Direction';

const s_testCases = [
    `
    .............
    .............
    .........cxc.
    .........cxc.
    .........cxc.
    ......ccc.x..
    ......xxxxx..
    ......cccc...
    .............
    .............
    .............
    .............
    .............
    `,
    `
    .............
    .............
    .............
    .............
    .............
    ......c......
    .....cxc.....
    ......c......
    .............
    .............
    .............
    .............
    .............
    `,
    `
    .............
    .............
    .............
    .............
    .............
    ......ccccc..
    ......xxxxx..
    ......ccccc..
    .............
    .............
    .............
    .............
    .............
    `,
    `
    .............
    .............
    .....cxc.....
    .....cxc.....
    .....cxc.....
    .....cxc.....
    .....cxc.....
    .............
    .............
    .............
    .............
    .............
    .............
    `,
    `
    .............
    .............
    .............
    .....cxc.....
    .....cxc.....
    ......x.cc...
    .....xxxxx...
    ......x.cc...
    .............
    .............
    .............
    .............
    .............
    `,
    `
    .............
    .............
    .............
    .....cxccxc..
    .....cxccxc..
    ......x..x...
    .....xxxxx...
    ......x..x...
    .............
    .............
    .............
    .............
    .............
    `,
    `
    .............
    .............
    .............
    cXc..........
    cXc..........
    .X...cccc....
    .X..XXXXX....
    XXXXX.ccc....
    X.c.Xc.......
    XXXXX........
    X.c.Xc.......
    X............
    .............
    `,
    `
    .............
    .............
    ...........cc
    .....cx.xxxxx
    .....cxc.x.cc
    ......x..x...
    .....xxxxx...
    ......x..x...
    .............
    .............
    .............
    .............
    .............
    `,
    `
    .............
    .............
    .............
    .............
    .............
    ....X..X.....
    ..X.XXXXX....
    XXXXX..X.....
    X.X.X..X.....
    X.X.XXXXX....
    X.X..........
    X............
    .............
    `,
    `
    .............
    .............
    ..........X..
    .......XXXXX.
    .......X..X..
    ....X..X..X..
    ..X.XXXXX.X..
    ..X.X..X.....
    .XXXXX.......
    ..X.X........
    ..X..........
    .............
    .............
    `,
    `
    .....X..XXXXX
    ...XXXXX..X.X
    ...X.X..XXXXX
    .XXXXX..X.X.X
    .X.X.X..XXXXX
    .X.X....X..X.
    .X..XXXXX..X.
    XXXXX......X.
    X.X.X.X.XXXXX
    XXXXX.X.X.X.X
    X.X.XXXXX.X.X
    X.X...X.XXXXX
    ....XXXXX.X.X
    `
];

describe('BoardTests', () => {
    test('TestSetInteractableTilesFromBoardStateTestEmptyBoard', () => {
        const board = new Array(13 * 13).fill(false);
        const blockedCells = new Array(13 * 13).fill(false);
        board[84] = true; // joker

        const placeables = BoardHelpers.findValidPlacementTilesForFirstCardOfHand(board, blockedCells);

        expect(placeables).toContain(83);
        expect(placeables).toContain(85);
        expect(placeables).toContain(84 - 13);
        expect(placeables).toContain(84 + 13);
    });

    test('TestSetInteractableTilesFromBoardStateOneHandHorizontal', () => {
        const board = new Array(13 * 13).fill(false);
        const blockedCells = new Array(13 * 13).fill(false);
        board[84] = true;
        board[85] = true;
        board[86] = true;
        board[87] = true;
        board[88] = true;

        const placeables = BoardHelpers.findValidPlacementTilesForFirstCardOfHand(board, blockedCells);

        // Above
        expect(placeables).toContain(84 - 13);
        expect(placeables).toContain(85 - 13);
        expect(placeables).toContain(86 - 13);
        expect(placeables).toContain(87 - 13);
        expect(placeables).toContain(88 - 13);

        // Below
        expect(placeables).toContain(84 + 13);
        expect(placeables).toContain(85 + 13);
        expect(placeables).toContain(86 + 13);
        expect(placeables).toContain(87 + 13);
        expect(placeables).toContain(88 + 13);
    });

    test('TestSetInteractableTilesFromBoardStateTestOffsetCross', () => {
        const board = new Array(13 * 13).fill(false);
        const blockedCells = new Array(13 * 13).fill(false);
        board[84] = true;
        board[85] = true;
        board[86] = true;
        board[87] = true;
        board[88] = true;

        board[87 + 13] = true;
        board[87 - 13] = true;
        board[87 - 13 * 2] = true;
        board[87 - 13 * 3] = true;

        const placeables = BoardHelpers.findValidPlacementTilesForFirstCardOfHand(board, blockedCells);

        // Above
        expect(placeables).toContain(84 - 13);
        expect(placeables).toContain(85 - 13);
        // Below
        expect(placeables).toContain(84 + 13);
        expect(placeables).toContain(85 + 13);

        expect(placeables).toContain(87 - 13 * 2 - 1);
        expect(placeables).toContain(87 - 13 * 2 + 1);
        expect(placeables).toContain(87 - 13 * 3 - 1);
        expect(placeables).toContain(87 - 13 * 3 + 1);
    });

    test('TestNotEnoughCardsTwoForkShape', () => {
        const board = `
        .............
        .............
        ......xcxcx..
        ......xcxcx..
        ......xcxcx..
        ......x.x.x..
        ......xxxxx..
        .............
        .............
        .............
        .............
        .............
        .............`;

        testExampleCaseInternal(board, (b, bc) => BoardHelpers.findValidPlacementTilesForFirstCardOfHandWithLimit(b, bc, 2));
    });

    test('TestNotEnoughCardsThreeForkShape', () => {
        const board = `
        .............
        .............
        .....cxcxcxc.
        .....cxcxcxc.
        .....cxcxcxc.
        ......x.x.x..
        ......xxxxx..
        .............
        .............
        .............
        .............
        .............
        .............`;

        testExampleCaseInternal(board, (b, bc) => BoardHelpers.findValidPlacementTilesForFirstCardOfHandWithLimit(b, bc, 3));
    });

    test('TestNotEnoughCardsTwoCShape', () => {
        const board = `
        .............
        .............
        ......x...x..
        ......x...x..
        ......x...x..
        ......x...x..
        ......xxxxx..
        .............
        .............
        .............
        .............
        .............
        .............`;

        testExampleCaseInternal(board, (b, bc) => BoardHelpers.findValidPlacementTilesForFirstCardOfHandWithLimit(b, bc, 2));
    });

    test('TestNotEnoughCardsThreeCShape', () => {
        const board = `
        .............
        .............
        ......xc.cx..
        ......xc.cx..
        ......xc.cx..
        ......x...x..
        ......xxxxx..
        .............
        .............
        .............
        .............
        .............
        .............`;

        testExampleCaseInternal(board, (b, bc) => BoardHelpers.findValidPlacementTilesForFirstCardOfHandWithLimit(b, bc, 3));
    });

    test('TestNotEnoughCardsThreeCShapePlacedOne', () => {
        const boardIn = `
        .............
        .............
        ......x...x..
        ......xwc.x..
        ......x...x..
        ......x...x..
        ......xxxxx..
        .............
        .............
        .............
        .............
        .............
        .............`;

        const { board, workingTileIndex } = extractBoardAndWorkingTileIndex(boardIn);
        const workingTilePosition = {
            x: workingTileIndex % 13,
            y: Math.floor(workingTileIndex / 13)
        };

        testExampleCaseInternal(board, (b, bc) =>
            BoardHelpers.findValidPlacementTilesAfterHavingAlreadyPlacedSomeCards(b, bc, workingTilePosition, Direction.Horizontal, 2)
        );
    });

    test('TestNotEnoughCardsThreeCShapePlacedTwo', () => {
        const boardIn = `
        .............
        .............
        ......x...x..
        ......xxwcx..
        ......x...x..
        ......x...x..
        ......xxxxx..
        .............
        .............
        .............
        .............
        .............
        .............`;

        const { board, workingTileIndex } = extractBoardAndWorkingTileIndex(boardIn);
        const workingTilePosition = {
            x: workingTileIndex % 13,
            y: Math.floor(workingTileIndex / 13)
        };

        testExampleCaseInternal(board, (b, bc) =>
            BoardHelpers.findValidPlacementTilesAfterHavingAlreadyPlacedSomeCards(b, bc, workingTilePosition, Direction.Horizontal, 1)
        );
    });

    test.each(s_testCases)('TestExampleCase - %s', (input) => {
        testExampleCaseInternal(input, BoardHelpers.findValidPlacementTilesForFirstCardOfHand);
    });

    function testExampleCaseInternal(boardString: string, func: (board: boolean[], blockedCells: boolean[]) => number[]): void {
        const input = boardString.replace(/\s/g, '').toLowerCase();
        if (input.length !== 13 * 13) {
            throw new Error('Invalid test case');
        }

        const blockedCells = new Array(13 * 13).fill(false);

        const { board, expectedCandidates } = parseBoardTestCase(input);
        const actualCandidates = func(board, blockedCells);

        expectedCandidates.sort((a, b) => a - b);
        actualCandidates.sort((a, b) => a - b);

        expect(expectedCandidates).toEqual(actualCandidates);
    }

    function parseBoardTestCase(board: string): { board: boolean[]; expectedCandidates: number[] } {
        const boardArray: boolean[] = new Array(13 * 13).fill(false);
        const expectedCandidates: number[] = [];

        for (let i = 0; i < 13 * 13; i++) {
            if (board[i] === 'x') {
                boardArray[i] = true;
            }
            if (board[i] === 'c') {
                expectedCandidates.push(i);
            }
        }

        return { board: boardArray, expectedCandidates };
    }

    function extractBoardAndWorkingTileIndex(boardIn: string): { board: string; workingTileIndex: number } {
        const workingTileIndex = boardIn.replace(/\s/g, '').indexOf('w');
        const board = boardIn.replace(/w/g, 'x').replace(/\s/g, '');
        return { board, workingTileIndex };
    }
});
